ITERATION 2 PLAN
things to accomplish:
audio
camera
game
item
terrain
structure
one planet
resourceHandler




FULL PLAN
x create barebones game class with update and render functions
x create basic item class that just draws a blue square in its position
x make camera class that belongs to game that can pan around and zoom
x create table with a few placeholder item names and their sprites
x create resourceHandler that loads in this info
x draw outline around items when being hovered
x add planet class to store items
x add saving and loading of items (default directory is just items)
x add chunk class and get saving and loading of chunks working
x add structure base class
x create sprites for conveyor belt and add it
- make conveyors actually functional
- get saving and loading of structures working
- add few more structure types
- add actual build menu
- add terrain class with saving and loading
- create some terrain types
- add procedural generation to planet (xor shift random)
- make GUI fully functional
- flesh out all the items, structures, terrain
- finish tech tree and help menu
- add sound effects and audio (maybe)



possible optimisations:
calculate accurate hitboxes for items in resource handler
draw items using vertex array instead of sprites


CURRENT TODO
DRAWING OBJECTS FROM BOTTOM TO TOP

need to figure out how to add z indexes into this
maybe z index outweighs y position?
(less than operator checks z index first, if same then uses y position)


add a less than operator for chunks that sorts based on y position
render chunks with smaller y position first
within chunks:
create a struct local to the render function that simply has a sprite
define its less than operator like with chunks
sort all sprites from top to bottom
draw in that order


x make functions for getting the chunk of a specific position (both absolute and tile)
x make function for converting absolute position to a tile position
x make function for converting tile position to tile position within chunk
x conveyors should collect items every frame (maybe?)
- conveyors need to have a list of the positions of all the items along the path
- move the items a little every frame